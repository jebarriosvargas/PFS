{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Cadena Unidimensional\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Relación de dispersión\n",
        "\n",
        "$$\n",
        "\\definecolor{azul}{RGB}{0, 0, 139}\n",
        "\\newcommand{\\kk}{\\textcolor{red}{k}}\n",
        "$$\n",
        "\n",
        "\n",
        "$$\n",
        "\\omega^2 = 2\\frac{\\kappa }{m}\\bigg[  1-\\cos(\\kk a ) \\bigg]\n",
        "$$\n",
        "\n",
        "Entonces,\n",
        "$$\n",
        "\\omega(k) = \\sqrt{\\frac{4\\kappa}{m}} \\bigg| \\sin\\bigg( \\frac{\\kk a}{2} \\bigg) \\bigg|\n",
        "$$\n",
        "\n",
        "\n",
        "## Desplazamientos del equilibrio\n",
        "\n",
        "$$\n",
        "x_n = x_n^{\\rm eq} + A e^{i\\omega t-i\\kk x_n^{\\rm eq}}\n",
        "$$\n",
        "\n",
        "donde $x_n^{\\rm eq}=na$.\n",
        "\n",
        "$$\n",
        "\\delta x_n = A e^{i\\omega t-i\\kk na}\n",
        "$$\n",
        "\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## $k = 0.2\\pi/a$\n"
      ],
      "id": "f62ca58f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "\n",
        "from pylab import *\n",
        "\n",
        "t   = 0; κ = 200; m = 1; a = 1; A = 0.2\n",
        "nmx = 10 \n",
        "n   = arange(-nmx,nmx)\n",
        "xeq = n*a\n",
        "yeq = zeros_like(xeq)\n",
        "#######\n",
        "k    = 0.2*pi/a\n",
        "#######\n",
        "ω    = sqrt(4*κ/m) * abs( sin(k*a/2) )\n",
        "δx   = A*exp(1J*ω*t-1J*k*n*a) # En lugar de δx_n\n",
        "x    = xeq + δx\n",
        "y    = zeros(len(xeq)) # + δx\n",
        "print(\"Valor de k seleccionado: \")\n",
        "print(f\"k = {k:.3f}\")\n",
        "print(\"Valor de ω seleccionado: \")\n",
        "print(f\"ω = {ω:.3f}\")\n",
        "print(\"Periódo de oscilación: \")\n",
        "\n",
        "T = 2*pi/ω\n",
        "print(f\"T = {ω:.3f}\")\n",
        "\n",
        "# Librería de graficación con plotly.\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "\n",
        "T      = 2*pi/ω   # periodo\n",
        "veces  = 10       # número de periodos\n",
        "\n",
        "# Posición en el tiempo cero\n",
        "t0  = 0\n",
        "δx0 = A*exp(1J*ω*t0-1J*k*n*a)\n",
        "x0  = xeq \n",
        "y0  = zeros(len(xeq)) + δx0\n",
        "\n",
        "\n",
        "time   = linspace(t0,veces*T,200,endpoint=False)\n",
        "\n",
        "\n",
        "Frames = []\n",
        "for t in time:\n",
        "    δx = A*exp(1J*ω*t-1J*k*n*a)\n",
        "    y  = zeros(len(xeq)) + δx\n",
        "    x  = xeq # + u # + δx\n",
        "    Frames.append( go.Frame(data=[ go.Scatter(x=x.real,\n",
        "                                              y=y.real,\n",
        "                                              mode=\"markers\",\n",
        "                                              marker=dict(color=\"red\",size=10),\n",
        "                                              name=f'time = {t:.2f}') ]) )\n",
        "\n",
        "\n",
        "fig = go.Figure(\n",
        "    data = [go.Scatter(x=x0.real, \n",
        "                       y=y0.real,\n",
        "                       mode=\"markers\",\n",
        "                       marker=dict(color=\"red\",size=10),\n",
        "                       name=f'time = {t0:.2f}')],\n",
        "    layout = go.Layout(xaxis=dict(range=[-nmx-1, nmx+1], autorange=False),\n",
        "                       yaxis=dict(range=[-0.5, 0.5], autorange=False),\n",
        "                       showlegend=True,\n",
        "                       title=\"Start Title\",\n",
        "                       updatemenus=[dict(type    = \"buttons\",\n",
        "                                         direction = \"right\",\n",
        "                                         buttons = [dict(label=\"Play\",\n",
        "                                                         method  = \"animate\",\n",
        "                                                         args    = [None,\n",
        "                                                                    dict(frame       = dict(duration=50,redraw=True), \n",
        "                                                                         transition  = dict(duration=4),\n",
        "                                                                         fromcurrent = True,\n",
        "                                                                         mode        = 'immediate')])])]),\n",
        "    frames = Frames\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "fed622f6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## $k = -0.2\\pi/a$\n"
      ],
      "id": "e4938bce"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "\n",
        "from pylab import *\n",
        "\n",
        "t   = 0; κ = 200; m = 1; a = 1; A = 0.2\n",
        "nmx = 10 \n",
        "n   = arange(-nmx,nmx)\n",
        "xeq = n*a\n",
        "yeq = zeros_like(xeq)\n",
        "#######\n",
        "k    = -0.2*pi/a\n",
        "#######\n",
        "ω    = sqrt(4*κ/m) * abs( sin(k*a/2) )\n",
        "δx   = A*exp(1J*ω*t-1J*k*n*a) # En lugar de δx_n\n",
        "x    = xeq + δx\n",
        "y    = zeros(len(xeq)) # + δx\n",
        "print(\"Valor de k seleccionado: \")\n",
        "print(f\"k = {k:.3f}\")\n",
        "print(\"Valor de ω seleccionado: \")\n",
        "print(f\"ω = {ω:.3f}\")\n",
        "print(\"Periódo de oscilación: \")\n",
        "\n",
        "T = 2*pi/ω\n",
        "print(f\"T = {ω:.3f}\")\n",
        "\n",
        "# Librería de graficación con plotly.\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "\n",
        "T      = 2*pi/ω   # periodo\n",
        "veces  = 10       # número de periodos\n",
        "\n",
        "# Posición en el tiempo cero\n",
        "t0  = 0\n",
        "δx0 = A*exp(1J*ω*t0-1J*k*n*a)\n",
        "x0  = xeq \n",
        "y0  = zeros(len(xeq)) + δx0\n",
        "\n",
        "\n",
        "time   = linspace(t0,veces*T,200,endpoint=False)\n",
        "\n",
        "\n",
        "Frames = []\n",
        "for t in time:\n",
        "    δx = A*exp(1J*ω*t-1J*k*n*a)\n",
        "    y  = zeros(len(xeq)) + δx\n",
        "    x  = xeq # + u # + δx\n",
        "    Frames.append( go.Frame(data=[ go.Scatter(x=x.real,\n",
        "                                              y=y.real,\n",
        "                                              mode=\"markers\",\n",
        "                                              marker=dict(color=\"red\",size=10),\n",
        "                                              name=f'time = {t:.2f}') ]) )\n",
        "\n",
        "\n",
        "fig = go.Figure(\n",
        "    data = [go.Scatter(x=x0.real, \n",
        "                       y=y0.real,\n",
        "                       mode=\"markers\",\n",
        "                       marker=dict(color=\"red\",size=10),\n",
        "                       name=f'time = {t0:.2f}')],\n",
        "    layout = go.Layout(xaxis=dict(range=[-nmx-1, nmx+1], autorange=False),\n",
        "                       yaxis=dict(range=[-0.5, 0.5], autorange=False),\n",
        "                       showlegend=True,\n",
        "                       title=\"Start Title\",\n",
        "                       updatemenus=[dict(type    = \"buttons\",\n",
        "                                         direction = \"right\",\n",
        "                                         buttons = [dict(label=\"Play\",\n",
        "                                                         method  = \"animate\",\n",
        "                                                         args    = [None,\n",
        "                                                                    dict(frame       = dict(duration=50,redraw=True), \n",
        "                                                                         transition  = dict(duration=4),\n",
        "                                                                         fromcurrent = True,\n",
        "                                                                         mode        = 'immediate')])])]),\n",
        "    frames = Frames\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "8bfa13ef",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## $k = \\pi/a$\n"
      ],
      "id": "ed2539de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "\n",
        "from pylab import *\n",
        "\n",
        "t   = 0; κ = 200; m = 1; a = 1; A = 0.2\n",
        "nmx = 10 \n",
        "n   = arange(-nmx,nmx)\n",
        "xeq = n*a\n",
        "yeq = zeros_like(xeq)\n",
        "#######\n",
        "k    = pi/a\n",
        "#######\n",
        "ω    = sqrt(4*κ/m) * abs( sin(k*a/2) )\n",
        "δx   = A*exp(1J*ω*t-1J*k*n*a) # En lugar de δx_n\n",
        "x    = xeq + δx\n",
        "y    = zeros(len(xeq)) # + δx\n",
        "print(\"Valor de k seleccionado: \")\n",
        "print(f\"k = {k:.3f}\")\n",
        "print(\"Valor de ω seleccionado: \")\n",
        "print(f\"ω = {ω:.3f}\")\n",
        "print(\"Periódo de oscilación: \")\n",
        "\n",
        "T = 2*pi/ω\n",
        "print(f\"T = {ω:.3f}\")\n",
        "\n",
        "# Librería de graficación con plotly.\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "\n",
        "T      = 2*pi/ω   # periodo\n",
        "veces  = 10       # número de periodos\n",
        "\n",
        "# Posición en el tiempo cero\n",
        "t0  = 0\n",
        "δx0 = A*exp(1J*ω*t0-1J*k*n*a)\n",
        "x0  = xeq \n",
        "y0  = zeros(len(xeq)) + δx0\n",
        "\n",
        "\n",
        "time   = linspace(t0,veces*T,200,endpoint=False)\n",
        "\n",
        "\n",
        "Frames = []\n",
        "for t in time:\n",
        "    δx = A*exp(1J*ω*t-1J*k*n*a)\n",
        "    y  = zeros(len(xeq)) + δx\n",
        "    x  = xeq # + u # + δx\n",
        "    Frames.append( go.Frame(data=[ go.Scatter(x=x.real,\n",
        "                                              y=y.real,\n",
        "                                              mode=\"markers\",\n",
        "                                              marker=dict(color=\"red\",size=10),\n",
        "                                              name=f'time = {t:.2f}') ]) )\n",
        "\n",
        "\n",
        "fig = go.Figure(\n",
        "    data = [go.Scatter(x=x0.real, \n",
        "                       y=y0.real,\n",
        "                       mode=\"markers\",\n",
        "                       marker=dict(color=\"red\",size=10),\n",
        "                       name=f'time = {t0:.2f}')],\n",
        "    layout = go.Layout(xaxis=dict(range=[-nmx-1, nmx+1], autorange=False),\n",
        "                       yaxis=dict(range=[-0.5, 0.5], autorange=False),\n",
        "                       showlegend=True,\n",
        "                       title=\"Start Title\",\n",
        "                       updatemenus=[dict(type    = \"buttons\",\n",
        "                                         direction = \"right\",\n",
        "                                         buttons = [dict(label=\"Play\",\n",
        "                                                         method  = \"animate\",\n",
        "                                                         args    = [None,\n",
        "                                                                    dict(frame       = dict(duration=50,redraw=True), \n",
        "                                                                         transition  = dict(duration=4),\n",
        "                                                                         fromcurrent = True,\n",
        "                                                                         mode        = 'immediate')])])]),\n",
        "    frames = Frames\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "7b1fc497",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## $k = 0.2\\pi/a+2\\pi/a$\n"
      ],
      "id": "a7a9731f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "\n",
        "from pylab import *\n",
        "\n",
        "t   = 0; κ = 200; m = 1; a = 1; A = 0.2\n",
        "nmx = 10 \n",
        "n   = arange(-nmx,nmx)\n",
        "xeq = n*a\n",
        "yeq = zeros_like(xeq)\n",
        "#######\n",
        "k    = 0.2*pi/a+2*pi/a\n",
        "#######\n",
        "ω    = sqrt(4*κ/m) * abs( sin(k*a/2) )\n",
        "δx   = A*exp(1J*ω*t-1J*k*n*a) # En lugar de δx_n\n",
        "x    = xeq + δx\n",
        "y    = zeros(len(xeq)) # + δx\n",
        "print(\"Valor de k seleccionado: \")\n",
        "print(f\"k = {k:.3f}\")\n",
        "print(\"Valor de ω seleccionado: \")\n",
        "print(f\"ω = {ω:.3f}\")\n",
        "print(\"Periódo de oscilación: \")\n",
        "\n",
        "T = 2*pi/ω\n",
        "print(f\"T = {ω:.3f}\")\n",
        "\n",
        "# Librería de graficación con plotly.\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "\n",
        "T      = 2*pi/ω   # periodo\n",
        "veces  = 10       # número de periodos\n",
        "\n",
        "# Posición en el tiempo cero\n",
        "t0  = 0\n",
        "δx0 = A*exp(1J*ω*t0-1J*k*n*a)\n",
        "x0  = xeq \n",
        "y0  = zeros(len(xeq)) + δx0\n",
        "\n",
        "\n",
        "time   = linspace(t0,veces*T,200,endpoint=False)\n",
        "\n",
        "\n",
        "Frames = []\n",
        "for t in time:\n",
        "    δx = A*exp(1J*ω*t-1J*k*n*a)\n",
        "    y  = zeros(len(xeq)) + δx\n",
        "    x  = xeq # + u # + δx\n",
        "    Frames.append( go.Frame(data=[ go.Scatter(x=x.real,\n",
        "                                              y=y.real,\n",
        "                                              mode=\"markers\",\n",
        "                                              marker=dict(color=\"red\",size=10),\n",
        "                                              name=f'time = {t:.2f}') ]) )\n",
        "\n",
        "\n",
        "fig = go.Figure(\n",
        "    data = [go.Scatter(x=x0.real, \n",
        "                       y=y0.real,\n",
        "                       mode=\"markers\",\n",
        "                       marker=dict(color=\"red\",size=10),\n",
        "                       name=f'time = {t0:.2f}')],\n",
        "    layout = go.Layout(xaxis=dict(range=[-nmx-1, nmx+1], autorange=False),\n",
        "                       yaxis=dict(range=[-0.5, 0.5], autorange=False),\n",
        "                       showlegend=True,\n",
        "                       title=\"Start Title\",\n",
        "                       updatemenus=[dict(type    = \"buttons\",\n",
        "                                         direction = \"right\",\n",
        "                                         buttons = [dict(label=\"Play\",\n",
        "                                                         method  = \"animate\",\n",
        "                                                         args    = [None,\n",
        "                                                                    dict(frame       = dict(duration=50,redraw=True), \n",
        "                                                                         transition  = dict(duration=4),\n",
        "                                                                         fromcurrent = True,\n",
        "                                                                         mode        = 'immediate')])])]),\n",
        "    frames = Frames\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "f99d085f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::"
      ],
      "id": "fda5cf84"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}