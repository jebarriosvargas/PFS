{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Partícula libre en una dimensión\n",
        "\n",
        "$$\n",
        "\\definecolor{magenta}{RGB}{255,0,144}\n",
        "\\newcommand{\\cparentesis}[1]{ {\\color{magenta} #1} }\n",
        "\\newcommand{\\iprn}{\\cparentesis{(}}\n",
        "\\newcommand{\\fprn}{\\cparentesis{)}}\n",
        "\\newcommand{\\ii}{{\\rm i}}\n",
        "$$\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Resolución de la partícula libre\n",
        "\n",
        "Una partícula libre es aquella que no está sometida a una fuerza, por lo que la energía potencial de una partícula es constante para todo valor de $x$ ($F_x=dU/dx=0$ $\\Rightarrow U\\iprn x \\fprn = {\\rm constante}$). Dado que tenemos la libertad de elección del nivel cero de energía, podemos elegir que $U\\iprn x \\fprn = {\\rm cte.} = 0$, por lo que la ecuación de Schrödinger independiente esta dada por,\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "\\hat{H} \\psi &= E \\psi \\\\\n",
        "\\bigg( -\\frac{\\hbar^2}{2m}\\frac{d^2}{dx^2} \\bigg) \\psi\\iprn x \\fprn &= E \\psi\\iprn x \\fprn\\\\\n",
        "-\\frac{\\hbar^2}{2m}\\frac{d^2\\psi\\iprn x \\fprn}{dx^2} &= E \\psi\\iprn x \\fprn\\\\\n",
        "\\Rightarrow \\frac{d^2\\psi\\iprn x \\fprn}{dx^2} &= -\\frac{2mE}{\\hbar^2} \\psi\\iprn x \\fprn\\\\\n",
        "\\therefore \\frac{d^2\\psi\\iprn x \\fprn}{dx^2} &+ \\frac{2mE}{\\hbar^2} \\psi\\iprn x \\fprn =0\n",
        "\\end{align}\n",
        "$$\n",
        "\n",
        "La ecuación a resolver es una ecuación diferencial lineal homogénea de segundo orden cuya solución general está dada por \n",
        "$$\n",
        "\\psi\\iprn x \\fprn = c_1 f_1\\iprn x \\fprn + c_2 f_2\\iprn x \\fprn\n",
        "$$\n",
        "donde $f_1\\iprn x \\fprn$ y $f_2\\iprn x \\fprn$ son soluciones de la ecuación diferencial y $c_1$ y $c_2$ son coeficientes constantes. En este caso especial de la partícula libre la ecuación diferencial lineal homogénea de segundo orden tiene coeficientes constantes, por lo que para resolverla podemos ocupar el *ansatz* $f\\iprn x \\fprn=e^{\\lambda x}$. Sustuimos,\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "\\frac{d^2 f \\iprn x \\fprn}{dx^2} + \\frac{2mE}{\\hbar^2} f \\iprn x \\fprn &=0\\\\\n",
        "\\frac{d^2 e^{\\lambda x}}{dx^2} + \\frac{2mE}{\\hbar^2} e^{\\lambda x} &=0\\\\\n",
        "\\lambda^2 e^{\\lambda x} + \\frac{2mE}{\\hbar^2} e^{\\lambda x} &=0\\\\\n",
        "\\Rightarrow \\lambda^2 + \\frac{2mE}{\\hbar^2} &=0\n",
        "\\end{align}\n",
        "$$\n",
        "\n",
        "Con la propuesta de solución hemos llegado a una ecuación algebráica de segundo orden que debe satisfacer $\\lambda$ para ser solución. Los dos posibles valores de $\\lambda$ son,\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "\\lambda = \\pm \\sqrt{ -\\frac{2mE}{\\hbar^2} } = \\pm {\\rm i}\\sqrt{ \\frac{2mE}{\\hbar^2} } \n",
        "\\end{align}\n",
        "$$\n",
        "\n",
        "Por lo que la solución general está dada por,\n",
        "\n",
        "$$\n",
        "\\psi\\iprn x \\fprn = c_1 e^{ {\\rm i}\\sqrt{ \\frac{2mE}{\\hbar^2} } x }+ c_2 e^{ -{\\rm i}\\sqrt{ \\frac{2mE}{\\hbar^2} } x }\n",
        "$$\n",
        "\n",
        ":::\n",
        "\n",
        "La solución de la partícula libre en mecánica cuántica está dada por,\n",
        "$$\n",
        "\\psi\\iprn x \\fprn = c_1 e^{ {\\rm i}\\sqrt{ \\frac{2mE}{\\hbar^2} } x }+ c_2 e^{ -{\\rm i}\\sqrt{ \\frac{2mE}{\\hbar^2} } x }\n",
        "$$\n",
        "\n",
        "Resulta útil definir $k \\equiv \\sqrt{\\frac{2mE}{\\hbar^2}}$, que nos permite reescribir la solución general de la forma \n",
        "\n",
        "$$\n",
        "\\psi\\iprn x \\fprn = c_1 e^{ {\\rm i}k x }+ c_2 e^{ -{\\rm i} k x }\n",
        "$$\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Sólo $E\\ge 0$\n",
        "\n",
        "¿Cuáles son las condiciones de frontera que tiene que satisfacer la solución? Una que es razonable es que la densidad de probabilidad sea positiva; es decir, $|\\psi\\iprn x \\fprn|^2=\\psi^*\\iprn x \\fprn \\psi\\iprn x \\fprn\\geq 0$ y con un valor finito. Notemos que si $E<0$ esta condición no se cumple. \n",
        "\n",
        "Sea $E<0\\Rightarrow k = \\sqrt{\\frac{2mE}{\\hbar^2}} = \\sqrt{-\\frac{2m|E|}{\\hbar^2}}=\\ii \\sqrt{\\frac{2m|E|}{\\hbar^2}}$; es decir, $k$ sería compleja. Al sustituir en la solución tenemos que,\n",
        "$$\n",
        "e^{ {\\rm i}k x } = e^{ \\ii \\cdot\\ii \\sqrt{\\frac{2m|E|}{\\hbar^2}} x} = e^{ - \\sqrt{\\frac{2m|E|}{\\hbar^2}} x} \\leftarrow \\text{es una función que crece sin cota para $x<0$}\n",
        "$$\n",
        "y\n",
        "$$\n",
        "e^{-{\\rm i}k x } = e^{ -\\ii \\cdot\\ii \\sqrt{\\frac{2m|E|}{\\hbar^2}} x} = e^{ \\sqrt{\\frac{2m|E|}{\\hbar^2}} x} \\leftarrow \\text{es una función que crece sin cota para $x>0$}\n",
        "$$\n",
        "Ambos comportamientos llevarían a que la densidad de probabilidad aumentaría sin cota, lo cual es incongruente con nuestra interpretación de la densidad de probabilidad. Por tanto, tenemos la **constricción** para la energía de que $E\\geq 0$. \n",
        "\n",
        "Consideramos que la energía potencial $U=0$, por lo que $E$ corresponde a sólo es energía cinética. \n",
        "\n",
        ":::\n",
        "\n",
        "Las constantes $c_1$ y $c_2$ son arbitrarias y si intentamos evaluar la integral \n",
        "$$\n",
        "\\int_{-\\infty}^{\\infty}  \\psi^*\\iprn x \\fprn \\psi\\iprn x \\fprn dx \\to \\infty\n",
        "$$\n",
        "Es decir, la solución de la partícula libre no es normalizable en el sentido usual. Este resultado es razonable, ya que no hay razón por la cual la probabilidad de encontrar a la partícula libre cuando $x\\to \\pm \\infty$ tienda a cero.\n",
        "\n",
        "## Visualización de la solución\n",
        "\n",
        "### Caso $c_1=1$ y $c_2=0$\n",
        "\n",
        "Considermos el caso de $c_1=1$ y $c_2=0$, por lo que \n",
        "$$\n",
        "\\psi\\iprn x \\fprn = e^{ {\\rm i}k x }\n",
        "$$\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Gráfica \n"
      ],
      "id": "1ca538cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pylab import *\n",
        "# Masa de un electrón\n",
        "m = 9.1093837e-31  # (kg)\n",
        "# Constante de planck entre 2π\n",
        "ħ = 1.05457182e-34 # (J·s)\n",
        "# 10 eV\n",
        "E = 10*1.602e-19 # (J)\n",
        "k = sqrt( 2*m*E/(ħ*ħ) )\n",
        "\n",
        "print( \"Caso. Un electrón con energía de 10 eV.\")\n",
        "print( f\"k = {k:.3e} (1/m)\")\n",
        "π  = pi\n",
        "x  = linspace( -3*2*π/k,3*2*π/k,1000 )\n",
        "ψ  = exp( 1J*k*x)\n",
        "ψ2 = conj(ψ)*ψ\n",
        "\n",
        "# Graficación\n",
        "\n",
        "fig,ax = plt.subplots(ncols=1,nrows=2,figsize=(6,4),sharex=True)\n",
        "fig.subplots_adjust(hspace=0.1)\n",
        "\n",
        "ax[0].plot(x,ψ.real,label='Re ψ')\n",
        "ax[0].plot(x,ψ.imag,label='Im ψ')\n",
        "\n",
        "ax[0].legend(loc=0)\n",
        "\n",
        "ax[1].plot(x,ψ2.real,label='|ψ|²')\n",
        "ax[1].fill_between(x,ψ2.real,zeros_like(x),alpha=0.3)\n",
        "\n",
        "ax[1].legend(loc=0)\n",
        "\n",
        "ax[1].set_xlabel('x (m)');"
      ],
      "id": "4870517a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "#### Visualización ${\\rm Re}\\Psi$\n",
        "\n",
        "Recordemos que la función de onda depende del tiempo y definimos \n",
        "\n",
        "$$\n",
        "\\omega = E/\\hbar\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\Psi \\iprn x,t \\fprn = e^{-\\ii \\omega t } e^{ {\\rm i}k x }\n",
        "$$\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Visualización ${\\rm Re}\\Psi$\n"
      ],
      "id": "2d726133"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pylab import *\n",
        "# import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Masa de un electrón\n",
        "m = 9.1093837e-31  # (kg)\n",
        "# Constante de planck entre 2π\n",
        "ħ = 1.05457182e-34 # (J·s)\n",
        "# 10 eV\n",
        "E = 10*1.602e-19 # (J)\n",
        "k = sqrt( 2*m*E/(ħ*ħ) )\n",
        "ω   = E/ħ\n",
        "π  = pi\n",
        "print( \"Caso. Un electrón con energía de 10 eV.\")\n",
        "print( f\"k = {k:.3e} (1/m)\")\n",
        "print( f\"ω = {ω:.3e} (1/s)\" )\n",
        "# Conversióna femptosegundos\n",
        "ω /= 1e15\n",
        "npts_x = 2000\n",
        "npts_t = 100\n",
        "# x,t = meshgrid( linspace(-3*2*π/k,3*2*π/k,npts_x),linspace(-1*2*π/ω,1*2*π/ω,npts_t) )\n",
        "X   = linspace(-3*2*π/k,3*2*π/k,npts_x)\n",
        "T   = linspace(0,4*2*π/ω,npts_t)\n",
        "Ψ   = exp(-1J*ω*T[0])*exp(1J*k*X)\n",
        "ReΨ = Ψ.real\n",
        "\n",
        "\n",
        "cuadros = []\n",
        "for n in range(1,npts_t):\n",
        "    Ψ = exp(-1J*ω*T[n])*exp(1J*k*X)\n",
        "    cuadros.append( go.Frame(data=[go.Scatter(x=X, y=Ψ.real,mode=\"lines\")],layout=go.Layout(title=f\"t={T[n]:.2f} (fs)\")) )\n",
        "\n",
        "cuadros = list(cuadros)\n",
        "\n",
        "fig = go.Figure(\n",
        "    data=[go.Scatter(x=X, y=ReΨ,mode=\"lines\")],\n",
        "    layout=go.Layout(\n",
        "        title=\"t=0.00 (fs)\",\n",
        "        xaxis_title=\"x (nm)\",\n",
        "        yaxis_title=\"Re[Ψ]\",\n",
        "        updatemenus=[dict(type=\"buttons\",\n",
        "                          x=0.5,y=1.1,\n",
        "                          buttons=[dict(label=\"Reproducir\",\n",
        "                                        method=\"animate\",\n",
        "                                        args=[None,\n",
        "                                        dict(frame=dict(duration=100,redraw=True),\n",
        "                                        transition=dict(duration=0,easing=None))] )])]\n",
        "                          \n",
        "    ),\n",
        "    frames = cuadros\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "c07ae5d2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "#### Visualización ${\\rm Im}\\Psi$\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Visualización ${\\rm Re}\\Psi$\n"
      ],
      "id": "e4f34838"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pylab import *\n",
        "# import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Masa de un electrón\n",
        "m = 9.1093837e-31  # (kg)\n",
        "# Constante de planck entre 2π\n",
        "ħ = 1.05457182e-34 # (J·s)\n",
        "# 10 eV\n",
        "E = 10*1.602e-19 # (J)\n",
        "k = sqrt( 2*m*E/(ħ*ħ) )\n",
        "ω   = E/ħ\n",
        "π  = pi\n",
        "print( \"Caso. Un electrón con energía de 10 eV.\")\n",
        "print( f\"k = {k:.3e} (1/m)\")\n",
        "print( f\"ω = {ω:.3e} (1/s)\" )\n",
        "# Conversióna femptosegundos\n",
        "ω /= 1e15\n",
        "npts_x = 2000\n",
        "npts_t = 100\n",
        "# x,t = meshgrid( linspace(-3*2*π/k,3*2*π/k,npts_x),linspace(-1*2*π/ω,1*2*π/ω,npts_t) )\n",
        "X   = linspace(-3*2*π/k,3*2*π/k,npts_x)\n",
        "T   = linspace(0,4*2*π/ω,npts_t)\n",
        "Ψ   = exp(-1J*ω*T[0])*exp(1J*k*X)\n",
        "ImΨ = Ψ.imag\n",
        "\n",
        "\n",
        "cuadros = []\n",
        "for n in range(1,npts_t):\n",
        "    Ψ   = exp(-1J*ω*T[n])*exp(1J*k*X)\n",
        "    cuadros.append( go.Frame(data=[go.Scatter(x=X, y=Ψ.imag,mode=\"lines\",line=dict(color='firebrick'))],layout=go.Layout(title=f\"t={T[n]:.2f} (fs)\")) )\n",
        "\n",
        "fig = go.Figure(\n",
        "    data=[go.Scatter(x=X, y=ImΨ,mode=\"lines\",line=dict(color='firebrick'))],\n",
        "    layout=go.Layout(\n",
        "        title=\"t=0.00 (fs)\",\n",
        "        xaxis_title=\"x (nm)\",\n",
        "        yaxis_title=\"Im[Ψ]\",\n",
        "        updatemenus=[dict(type=\"buttons\",\n",
        "                          x=0.5,y=1.0,\n",
        "                          buttons=[dict(label=\"Reproducir\",\n",
        "                                        method=\"animate\",\n",
        "                                        args=[None,\n",
        "                                        dict(frame=dict(duration=100,redraw=True),\n",
        "                                        transition=dict(duration=0,easing=None))] )])]\n",
        "                          \n",
        "    ),\n",
        "    frames = cuadros\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "7161d920",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "#### Visualización flechas\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Viualización $({\\rm Re}\\Psi, {\\rm Im}\\Psi)$"
      ],
      "id": "d7411eba"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pylab import *\n",
        "# import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "import plotly.figure_factory as ff\n",
        "\n",
        "\n",
        "# Masa de un electrón\n",
        "m = 9.1093837e-31  # (kg)\n",
        "# Constante de planck entre 2π\n",
        "ħ = 1.05457182e-34 # (J·s)\n",
        "# 10 eV\n",
        "E = 10*1.602e-19 # (J)\n",
        "k = sqrt( 2*m*E/(ħ*ħ) )\n",
        "ω   = E/ħ\n",
        "print( \"Caso. Un electrón con energía de 10 eV.\")\n",
        "print( f\"k = {k:.3e} (1/m)\")\n",
        "print( f\"ω = {ω:.3e} (1/s)\" )\n",
        "ω /= 1e15 # Conversióna femtosegundos\n",
        "k /= 1e9  # Conversión a nanometros \n",
        "npts_x = 16\n",
        "npts_t = 100\n",
        "# x,t = meshgrid( linspace(-3*2*π/k,3*2*π/k,npts_x),linspace(-1*2*π/ω,1*2*π/ω,npts_t) )\n",
        "X   = linspace(-3*2*π/k,3*2*π/k,npts_x)\n",
        "Y   = zeros_like(X)\n",
        "T   = linspace(0,4*2*π/ω,npts_t)\n",
        "Ψ   = exp(-1J*ω*T[0])*exp(1J*k*X)\n",
        "ReΨ = Ψ.real\n",
        "ImΨ = Ψ.imag\n",
        "\n",
        "\n",
        "cuadros = []\n",
        "for n in range(1,npts_t):\n",
        "    Ψ   = exp(-1J*ω*T[n])*exp(1J*k*X)\n",
        "    ReΨ = Ψ.real\n",
        "    ImΨ = Ψ.imag\n",
        "    fig = ff.create_quiver(X, Y, ReΨ, ImΨ,angle=pi/6)\n",
        "    cuadros.append( go.Frame(data=fig.data,layout=go.Layout(title=f\"t={T[n]:.2f} (fs)\")) )\n",
        "\n",
        "\n",
        "fig0 = ff.create_quiver(X, Y, ReΨ, ImΨ,angle=pi/6)\n",
        "fig = go.Figure(\n",
        "    data = fig0.data,\n",
        "    layout=go.Layout(\n",
        "        title=\"t=0.00 (fs)\",\n",
        "        xaxis_title=\"x (nm)\",\n",
        "        updatemenus=[dict(type=\"buttons\",\n",
        "                          x=0.5,y=1.0,\n",
        "                          buttons=[dict(label=\"Reproducir\",\n",
        "                                        method=\"animate\",\n",
        "                                        args=[None,\n",
        "                                        dict(frame=dict(duration=100,redraw=True),\n",
        "                                        transition=dict(duration=0,easing=None))] )])]\n",
        "                          \n",
        "    ),\n",
        "    frames = cuadros\n",
        ")\n",
        "fig.update_yaxes(range=[-1,1])\n",
        "\n",
        "fig.show()"
      ],
      "id": "d56a08f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "### Caso $c_1=0$ y $c_2=1$\n",
        "\n",
        "Considermos el caso de $c_1=1$ y $c_2=0$, por lo que \n",
        "$$\n",
        "\\psi\\iprn x \\fprn = e^{ -{\\rm i}k x }\n",
        "$$\n",
        "\n",
        "#### Visualización ${\\rm Re}\\Psi$ y ${\\rm Im}\\Psi$\n",
        "\n",
        "Recordemos que la función de onda depende del tiempo y definimos \n",
        "$$ \n",
        "\\omega =E/\\hbar\n",
        "$$\n",
        "\n",
        "\n",
        "$$\n",
        "\\Psi \\iprn x,t \\fprn = e^{-\\ii \\omega t } e^{ -{\\rm i}k x }\n",
        "$$\n",
        "\n",
        "::: {.callout-note appearance=\"simple\" icon=false collapse=\"true\"}\n",
        "## Viualización ${\\rm Re}\\Psi$ e ${\\rm Im}\\Psi$\n"
      ],
      "id": "38580185"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from pylab import *\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Masa de un electrón\n",
        "m = 9.1093837e-31  # (kg)\n",
        "# Constante de planck entre 2π\n",
        "ħ = 1.05457182e-34 # (J·s)\n",
        "# 10 eV\n",
        "E = 10*1.602e-19 # (J)\n",
        "k = sqrt( 2*m*E/(ħ*ħ) )\n",
        "ω   = E/ħ\n",
        "print( \"Caso. Un electrón con energía de 10 eV.\")\n",
        "print( f\"k = {k:.3e} (1/m)\")\n",
        "print( f\"ω = {ω:.3e} (1/s)\" )\n",
        "# Conversióna femptosegundos\n",
        "ω /= 1e15\n",
        "npts_x = 2000\n",
        "npts_t = 100\n",
        "# x,t = meshgrid( linspace(-3*2*π/k,3*2*π/k,npts_x),linspace(-1*2*π/ω,1*2*π/ω,npts_t) )\n",
        "X   = linspace(-3*2*π/k,3*2*π/k,npts_x)\n",
        "T   = linspace(0,4*2*π/ω,npts_t)\n",
        "Ψ   = exp(-1J*ω*T[0])*exp(-1J*k*X)\n",
        "ReΨ = Ψ.real\n",
        "ImΨ = Ψ.imag\n",
        "\n",
        "\n",
        "cuadros = []\n",
        "for n in range(1,npts_t):\n",
        "    Ψ   = exp(-1J*ω*T[n])*exp(-1J*k*X)\n",
        "    cuadros.append( go.Frame(data=[go.Scatter(x=X, y=Ψ.real,mode=\"lines\",name=\"ReΨ\" ),\n",
        "                                   go.Scatter(x=X, y=Ψ.imag,mode=\"lines\",line=dict(color='firebrick'),name=\"ImΨ\" )],\n",
        "                             layout=go.Layout(title=f\"t={T[n]:.2f} (fs)\")) )\n",
        "\n",
        "fig = go.Figure(\n",
        "    data=[go.Scatter(x=X, y=ReΨ,mode=\"lines\",name=\"ReΨ\" ),go.Scatter(x=X, y=Ψ.imag,mode=\"lines\",line=dict(color='firebrick'),name=\"ImΨ\" )],\n",
        "    layout=go.Layout(\n",
        "        title=\"t=0.00 (fs)\",\n",
        "        xaxis_title=\"x (nm)\",\n",
        "        yaxis_title=\"Re[Ψ]\",\n",
        "        updatemenus=[dict(type=\"buttons\",\n",
        "                          x=0.5,y=1.0,\n",
        "                          buttons=[dict(label=\"Reproducir\",\n",
        "                                        method=\"animate\",\n",
        "                                        args=[None,\n",
        "                                        dict(frame=dict(duration=100,redraw=True),\n",
        "                                        transition=dict(duration=0,easing=None))] )])]\n",
        "                          \n",
        "    ),\n",
        "    frames = cuadros\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "0703fa6c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::"
      ],
      "id": "8da850cc"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}