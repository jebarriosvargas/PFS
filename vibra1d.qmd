---
title: "Cadena Unidimensional"
format: html
---


## Relación de dispersión

$$
\definecolor{azul}{RGB}{0, 0, 139}
\newcommand{\kk}{\textcolor{red}{k}}
$$


$$
\omega^2 = 2\frac{\kappa }{m}\bigg[  1-\cos(\kk a ) \bigg]
$$

Entonces,
$$
\omega(k) = \sqrt{\frac{4\kappa}{m}} \bigg| \sin\bigg( \frac{\kk a}{2} \bigg) \bigg|
$$


## Desplazamientos del equilibrio

$$
x_n = x_n^{\rm eq} + A e^{i\omega t-i\kk x_n^{\rm eq}}
$$

donde $x_n^{\rm eq}=na$.

$$
\delta x_n = A e^{i\omega t-i\kk na}
$$




```{python}
from pylab import *

t   = 0; κ = 100; m = 1; a = 1; A = 0.2
nmx = 10 
n   = arange(-nmx,nmx)
xeq = n*a
yeq = zeros_like(xeq)
#######
k    = 0.2*pi/a
#######
ω    = sqrt(4*κ/m) * abs( sin(k*a/2) )
δx   = A*exp(1J*ω*t-1J*k*n*a) # En lugar de δx_n
x    = xeq + δx
y    = zeros(len(xeq)) # + δx
print("Valor de k seleccionado: ")
print(f"k = {k:.3f}")
print("Valor de ω seleccionado: ")
print(f"ω = {ω:.3f}")
print("Periódo de oscilación: ")

T = 2*pi/ω
print(f"T = {ω:.3f}")
```



```{python}
#| code-fold: true

# Librería de graficación con plotly.
import plotly.graph_objects as go


T      = 2*pi/ω   # periodo
veces  = 10       # número de periodos

# Posición en el tiempo cero
t0  = 0
δx0 = A*exp(1J*ω*t0-1J*k*n*a)
x0  = xeq 
y0  = zeros(len(xeq)) + δx0


time   = linspace(t0,veces*T,endpoint=False)


Frames = []
for t in time:
    δx = A*exp(1J*ω*t-1J*k*n*a)
    y  = zeros(len(xeq)) + δx
    x  = xeq # + u # + δx
    Frames.append( go.Frame(data=[ go.Scatter(x=x.real,
                                              y=y.real,
                                              mode="markers",
                                              marker=dict(color="red",size=10),
                                              name=f'time = {t:.2f}') ]) )


fig = go.Figure(
    data = [go.Scatter(x=x0.real, 
                       y=y0.real,
                       mode="markers",
                       marker=dict(color="red",size=10),
                       name=f'time = {t0:.2f}')],
    layout = go.Layout(xaxis=dict(range=[-nmx-1, nmx+1], autorange=False),
                       yaxis=dict(range=[-0.5, 0.5], autorange=False),
                       showlegend=True,
                       title="Start Title",
                       updatemenus=[dict(type    = "buttons",
                                         direction = "right",
                                         buttons = [dict(label="Play",
                                                         method  = "animate",
                                                         args    = [None,
                                                                    dict(frame       = dict(duration=50,redraw=True), 
                                                                         transition  = dict(duration=4),
                                                                         fromcurrent = True,
                                                                         mode        = 'immediate')])])]),
    frames = Frames
)

fig.show()
```

