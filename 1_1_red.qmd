# Red

:::{.justify}
En general, los sólidos se forman de átomos densamente empaquetados, en especial, estaremos interesados cuando los átomos formen arreglos con simetría traslacional que llamaremos estructuras periódicas o estructuras cristalinas (de forma breve también los llamaremos cristales). Las estructuras periódicas se caracterizan por la combinación de una red y un decorado.
:::

::: {.callout-note appearance="simple" icon=false collapse="false"}
## Red (definición)

Una red es el conjunto infinito de puntos definidos por la suma con coeficientes enteros de un conjunto de vectores de red linealmente independientes.

$$
\text{En 1D: }\quad \bigg\{ \vec{R}_{(n1)} = n_1\vec{a}_1 \;\bigg|\; n_1\in \mathbb{Z}\bigg\}
$$

$$
\text{En 2D: }\quad \bigg\{ \vec{R}_{(n1,n2)} = n_1\vec{a}_1 +n_2\vec{a}_2 \;\bigg|\; n_1,n_2 \in \mathbb{Z}\bigg\}
$$

$$
\text{En 3D: }\quad \bigg\{ \vec{R}_{(n1,n2,n3)} = n_1\vec{a}_1 +n_2\vec{a}_2+n_3\vec{a_3} \;\bigg|\; n_1,n_2,n_3 \in \mathbb{Z}\bigg\}
$$

:::

## En 1D

```{python}
#| label: fig-red1d
#| fig-cap: "Ejemplo de red unidimensional"

# En el ambiente cargamos las opciones más comúnes de numpy, scipy y matplotlib
from pylab import * 

# Definimos la magnitud del vector a1
a1 = 0.6
# Definimos el vector vec_a1
vec_a1 = array([a1])
# Tomamos un subconjunto del conjunto de enteros [-4,-3,-2,-1,0,1,2,3,4]
n1 = arange( -4, 5 )
# Obtenemos los puntos de la red
red = dot( n1.reshape(len(n1),1),vec_a1 )

# Graficamos 
# Definimos una figura -> fig y sus ejes -> ax
fig,ax = plt.subplots(figsize=((4,2)))

# Graficamos con puntos los puntos de la red en un sistema de coordenadas cartesiano. 
# En el eje x colocamos los puntos de la red y en el eje y asignamos cero.
# ax.scatter( [coordenadas: x] , [coordenadas: y], label="Etiqueta que identifica los datos")
ax.scatter(red, zeros_like(red), label=f"$a_1={a1}$")
# Escribimos ax.scatter ya que se grafican los puntos (scatter) en los ejes (ax).

# Colocamos el cuadro de leyenda
ax.legend()
# Colocamos las marcas en el eje x acorde a los puntos de la red
ax.set_xticks(red)
# Colocamos unas líneas punteadas como guía
ax.grid(ls='--')
# Colocamos las marcas en el eje y
ax.set_yticks([0])
# Colocamos el texto en las marcas del eje y
ax.set_yticklabels([""])

# Mostramos la gráfica
plt.show()

```

## En 2D

```{python}
#| label: fig-red2d
#| fig-cap: "Ejemplo de red bidimensional"

# En el ambiente cargamos las opciones más comúnes de numpy, scipy y matplotlib
from pylab import * 

# Definimos la magnitud de los vectores, a1 y a2
a1 = 1.0
a2 = 1.0
# Definimos el vector vec_a1
vec_a1 = array([       a1,         0])
# Definimos el vector vec_a2 con una rotación de un ángulo θ
θ = radians(60)
vec_a2 = array([a2*cos(θ), a2*sin(θ)])
# Tomamos un subconjunto del conjunto de enteros [-4,-3,-2,-1,0,1,2,3,4] 
# tanto para n1 como n2
n1,n2 = meshgrid ( arange( -4, 5 ), arange( -4, 5 ) )
# Con el fin de realizar las diferentes combinaciones lineales nos será 
# útil tener los coeficiente como un arreglo en una dimensión
n1 = n1.flatten()
n2 = n2.flatten()
# Colocamos los vectores en una matriz, donde cada renglón es un vector
A = array( [vec_a1,vec_a2] )
# Colocamos los coeficientes en una matriz
coefs = column_stack((n1,n2))
# Obtenemos los puntos de la red al multiplicar ambas matrices
red = dot( coefs,A )

# Graficamos 
# Definimos una figura -> fig y sus ejes -> ax
fig,ax = plt.subplots(figsize=((6,6)))

# Graficamos con puntos los puntos de la red en un sistema de coordenadas cartesiano. 
# En el eje x colocamos los puntos de la red y en el eje y asignamos cero.
# ax.scatter( [coordenadas: x] , [coordenadas: y], label="Etiqueta que identifica los datos")
ax.scatter(red.T[0], red.T[1], label=f"$a_1={a1:.2f}, a_2={a2:.2f}, θ={rad2deg(θ):.1f}$")
# Escribimos ax.scatter ya que se grafican los puntos (scatter) en los ejes (ax).

# Graficamos los vectores de red
ax.arrow(0,0,vec_a1[0],vec_a1[1],width=0.08,lw=0,label="vec $a_1$",color="red",length_includes_head=True)
ax.arrow(0,0,vec_a2[0],vec_a2[1],width=0.08,lw=0,label="vec $a_2$",color="blue",length_includes_head=True)

# Colocamos el cuadro de leyenda
ax.legend()

ax.set_aspect('equal')

# Mostramos la gráfica
plt.show()
```

## En 3D
```{python}
#| label: fig-red3d
#| fig-cap: "Ejemplo de red tridimensional"

a1,a2,a3 = 1,1,3
vec_a1 = array([a1,0,0])
θ = radians(120)
vec_a2 = array([a2*cos(θ), a2*sin(θ),0])
vec_a3 = array([0,0,a3])
A = array( [vec_a1,vec_a2,vec_a3] )
n1,n2,n3 = mgrid[ -2:2:5J,-2:2:5J,-1:1:3J ]
n1 = n1.flatten()
n2 = n2.flatten()
n3 = n3.flatten()
coefs = column_stack((n1,n2,n3))

red = dot(coefs,A)

import plotly.graph_objects as go

def GraficaVector(a,vec_a,Color,label):
    Tip    = 0.5
    ColorP = Color
    P      = vec_a
    # Dirección de los vectores
    Punit  = P/sqrt(dot(P,P))
    # Vector P
    TipP = go.Cone(x=[P[0]],y=[P[1]],z=[P[2]],
                u=[Tip*Punit[0]],v=[Tip*Punit[1]],w=[Tip*Punit[2]],
                colorscale=[[0, ColorP],[1.0, ColorP]],
                sizemode="absolute",
                sizeref=Tip,
                anchor="tip",
                showscale=False)
    VecP = go.Scatter3d(x=[0,P[0]-Tip*Punit[0]],
                        y=[0,P[1]-Tip*Punit[1]],
                        z=[0,P[2]-Tip*Punit[2]],
                        mode="lines",name=label,
                        line=dict(width=10,color=ColorP))
    return TipP,VecP

Tipa1,Veca1 = GraficaVector(a1,vec_a1,'rgba(0, 191, 255, 60)',"a1")
Tipa2,Veca2 = GraficaVector(a2,vec_a2,'rgba(233,150,122, 60)',"a2")
Tipa3,Veca3 = GraficaVector(a3,vec_a3,'rgba( 50,205, 50, 60)',"a2")

PLOTS = [go.Scatter3d(x=red.T[0], y=red.T[1], z=red.T[2], mode='markers',marker=dict(size=6),name="red"),Tipa1,Veca1,Tipa2,Veca2,Tipa3,Veca3]

fig = go.Figure(data=PLOTS)
fig.show()

```

::: {.callout-note appearance="simple" icon=false collapse="false"}
## Red (definición equivalente)
Una red es un conjunto de puntos donde el entorno de cualquier punto es quivalente al entorno de cualquier otro.
:::

